ggplot(groupdf, aes(x=iconset, y=hitm, group=expdur,color=expdur)) +
geom_point(shape=21, stroke=3, fill="grey") +
geom_line(alpha=.5, linetype='dotdash')
# you can also map aesethics to variables within a geom using aes()
ggplot(groupdf, aes(x=iconset, y=hitm, group=expdur,color=expdur)) +
geom_point(aes(fill=expdur),shape=21, size=3, stroke=2,fill='white') + # setting the fill = 'white' is overwriting the fill=expdur
geom_line(aes(linetype=expdur))
ggplot(groupdf, aes(x=iconset, y=hitm, group=expdur,color=expdur)) +
geom_point(aes(fill=expdur),shape=21, size=3, stroke=2) +
geom_line(aes(linetype=expdur)) # currently the lines are being drawn on top of the points, need to adjust the order to change this
ggplot(groupdf, aes(x=iconset, y=hitm, group=expdur,color=expdur)) +
geom_line(aes(linetype=expdur)) +
geom_point(aes(fill=expdur),shape=21, size=3, stroke=2)
ggplot(groupdf, aes(x=iconset, y=hitm, group=expdur,color=iconset)) + # this is applying the color=iconset to the WHOLE graph, not just the point, it is fine for this example but a better way is moving it into geom_point
geom_point(aes(fill=iconset),shape=21, size=3, stroke=2) + # setting the fill = 'white' is overwriting the fill=expdur
geom_line(aes(linetype=expdur), color='red')
ggplot(groupdf, aes(x=iconset, y=hitm, group=expdur)) + # this is applying the color=iconset to the WHOLE graph, not just the point, it is fine for this example but a better way is moving it into geom_point
geom_point(aes(fill=iconset,color=iconset),shape=21, size=3, stroke=2) + # setting the fill = 'white' is overwriting the fill=expdur
geom_line(aes(linetype=expdur), color='red')
# you have a couple of options
# first you can use stat_summary to calculate the mean of each condition you wish to plot
ggplot(sbjdf, aes(x=expdur, y=fa)) +
stat_summary(fun.y=mean,  geom="bar")
# using this appraoch, you can also add standard error bars
ggplot(sbjdf, aes(x=expdur, y=fa)) +
stat_summary(fun.y=mean,  geom="bar") +
stat_summary(fun.data=mean_se, geom="errorbar")
# and make it look nicer!
ggplot(sbjdf, aes(x=expdur, y=fa, color=expdur)) +
stat_summary(fun.y=mean,  geom="bar", fill=NA) + #fill = NA, makes the bars transpartent
stat_summary(fun.data=mean_se, geom="errorbar", width=.3) # width =.3 makes the error bar with 1/3 of the bar
# things get even trickier when you try to include another variable
ggplot(sbjdf, aes(x=iconset, y=fa, color=expdur)) +
stat_summary(fun.y=mean,  geom="bar", fill=NA) +
stat_summary(fun.data=mean_se, geom="errorbar", width=.3) # will by default stack the bars on top of e/o
# the default is to stak all bars on ontop of each other
# you can use position="dodge" to create a clustered bar graph
ggplot(sbjdf, aes(x=iconset, y=fa, color=expdur)) +
stat_summary(fun.y=mean,  geom="bar", fill=NA, position="dodge") +
stat_summary(fun.data=mean_se, geom="errorbar", position="dodge")
# or for more control you can use position = position_dodge(width=x) syntax
ggplot(sbjdf, aes(x=iconset, y=fa, color=expdur)) +
stat_summary(fun.y=mean,  geom="bar", fill=NA, position=position_dodge(width=.9)) +
stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(), width=.3) # need to set width=.9, or else will squish all the errorbars together
ggplot(sbjdf, aes(x=iconset, y=fa, color=expdur)) +
stat_summary(fun.y=mean,  geom="bar", fill=NA, position=position_dodge(width=.9)) +
stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(width=.9), width=.3) # need to set width=.9, or else will squish all the errorbars together
# simple boxplots
ggplot(sbjdf, aes(x=iconset, y=fa, color=expdur)) +
geom_boxplot(outlier.size = .8, lwd=1)
# violin plots with jittered data points
ggplot(sbjdf, aes(x=iconset, y=fa, fill=expdur)) +
geom_violin(position = position_dodge(width = 0.9), alpha=.3,color=NA) +
geom_point(aes(color=expdur),position = position_jitterdodge(seed = 1, dodge.width = 0.9)) +
theme_classic()
# dotplot with bootstrapped confidence intervals as a point range
# note that mean_cl_boot uses Hmisc papckage installed at top of script
ggplot(sbjdf, aes(x=expdur, y=fa, group=expdur, color =expdur)) +
geom_dotplot(binaxis='y', stackdir='center', dotsize=.2, alpha=.5, fill = 'white')+
stat_summary(fun.data=mean_cl_boot, geom="pointrange", color="red") + # the red lines you see are the bootstrapped confidence intervals - throught the Hmisc package
theme_classic()
# using this appraoch, you can also add standard error bars
ggplot(sbjdf, aes(x=expdur, y=fa)) +
stat_summary(fun.y=mean,  geom="bar") +
stat_summary(fun.data=mean_se, geom="errorbar")
# and make it look nicer!
ggplot(sbjdf, aes(x=expdur, y=fa, color=expdur)) +
stat_summary(fun.y=mean,  geom="bar", fill=NA) + #fill = NA, makes the bars transpartent
stat_summary(fun.data=mean_se, geom="errorbar", width=.3) # width =.3 makes the error bar with 1/3 of the bar
# things get even trickier when you try to include another variable
ggplot(sbjdf, aes(x=iconset, y=fa, color=expdur)) +
stat_summary(fun.y=mean,  geom="bar", fill=NA) +
stat_summary(fun.data=mean_se, geom="errorbar", width=.3) # will by default stack the bars on top of e/o
# the default is to stak all bars on ontop of each other
# you can use position="dodge" to create a clustered bar graph
ggplot(sbjdf, aes(x=iconset, y=fa, color=expdur)) +
stat_summary(fun.y=mean,  geom="bar", fill=NA, position="dodge") +
stat_summary(fun.data=mean_se, geom="errorbar", position="dodge")
# or for more control you can use position = position_dodge(width=x) syntax
ggplot(sbjdf, aes(x=iconset, y=fa, color=expdur)) +
stat_summary(fun.y=mean,  geom="bar", fill=NA, position=position_dodge(width=.9)) +
stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(), width=.3) # need to set width=.9, or else will squish all the errorbars together
ggplot(sbjdf, aes(x=iconset, y=fa, color=expdur)) +
stat_summary(fun.y=mean,  geom="bar", fill=NA, position=position_dodge(width=.9)) +
stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(width=.9), width=.3) # need to set width=.9, or else will squish all the errorbars together
View(sbjdf)
# dotplot with bootstrapped confidence intervals as a point range
# note that mean_cl_boot uses Hmisc papckage installed at top of script
ggplot(sbjdf, aes(x=expdur, y=fa, group=expdur, color =expdur)) +
geom_dotplot(binaxis='y', stackdir='center', dotsize=.2, alpha=.5, fill = 'white')+
stat_summary(fun.data=mean_cl_boot, geom="pointrange", color="red") + # the red lines you see are the bootstrapped confidence intervals - throught the Hmisc package
theme_classic()
ggplot(sbjdf, aes(x=expdur, y=fa, group=expdur, color =expdur)) +
geom_dotplot(binaxis='y', stackdir='center', dotsize=.2, alpha=.5, fill = expdur)+
stat_summary(fun.data=mean_cl_boot, geom="pointrange", color="red") + # the red lines you see are the bootstrapped confidence intervals - throught the Hmisc package
theme_classic()
ggplot(sbjdf, aes(x=expdur, y=fa, group=expdur, color =expdur)) +
geom_dotplot(binaxis='y', stackdir='center', dotsize=.2, alpha=.5, fill = 'white')+
stat_summary(fun.data=mean_cl_boot, geom="pointrange", color="red") + # the red lines you see are the bootstrapped confidence intervals - throught the Hmisc package
theme_classic()
ggplot(sbjdf, aes(x=expdur, y=fa, group=expdur)) +
geom_dotplot(binaxis='y', stackdir='center', dotsize=.2, alpha=.5, fill = expdur)+
stat_summary(fun.data=mean_cl_boot, geom="pointrange", color="red") + # the red lines you see are the bootstrapped confidence intervals - throught the Hmisc package
theme_classic()
# and make it look nicer!
ggplot(sbjdf, aes(x=expdur, y=fa, color=expdur)) +
stat_summary(fun.y=mean,  geom="bar", fill=NA) + #fill = NA, makes the bars transpartent
stat_summary(fun.data=mean_se, geom="errorbar", width=.3) # width =.3 makes the error bar with 1/3 of the bar
# things get even trickier when you try to include another variable
ggplot(sbjdf, aes(x=iconset, y=fa, color=expdur)) +
stat_summary(fun.y=mean,  geom="bar", fill=NA) +
stat_summary(fun.data=mean_se, geom="errorbar", width=.3) # will by default stack the bars on top of e/o
# the default is to stak all bars on ontop of each other
# you can use position="dodge" to create a clustered bar graph
ggplot(sbjdf, aes(x=iconset, y=fa, color=expdur)) +
stat_summary(fun.y=mean,  geom="bar", fill=NA, position="dodge") +
stat_summary(fun.data=mean_se, geom="errorbar", position="dodge")
# using this appraoch, you can also add standard error bars
ggplot(sbjdf, aes(x=expdur, y=fa)) +
stat_summary(fun.y=mean,  geom="bar") +
stat_summary(fun.data=mean_se, geom="errorbar")
# simple boxplots
ggplot(sbjdf, aes(x=iconset, y=fa, color=expdur)) +
geom_boxplot(outlier.size = .8, lwd=1)
# violin plots with jittered data points
ggplot(sbjdf, aes(x=iconset, y=fa, fill=expdur)) +
geom_violin(position = position_dodge(width = 0.9), alpha=.3,color=NA) +
geom_point(aes(color=expdur),position = position_jitterdodge(seed = 1, dodge.width = 0.9)) +
theme_classic()
# simple boxplots
ggplot(sbjdf, aes(x=iconset, y=fa, color=expdur)) +
geom_boxplot(outlier.size = .8, lwd=1)
# dotplot with bootstrapped confidence intervals as a point range
# note that mean_cl_boot uses Hmisc papckage installed at top of script
ggplot(sbjdf, aes(x=expdur, y=fa, group=expdur, color =expdur)) +
geom_dotplot(binaxis='y', stackdir='center', dotsize=.2, alpha=.5, fill = 'white')+
stat_summary(fun.data=mean_cl_boot, geom="pointrange", color="red") + # the red lines you see are the bootstrapped confidence intervals - throught the Hmisc package
theme_classic()
# violin plots with jittered data points
ggplot(sbjdf, aes(x=iconset, y=fa, fill=expdur)) +
geom_violin(position = position_dodge(width = 0.9), alpha=.3,color=NA) +
geom_point(aes(color=expdur),position = position_jitterdodge(seed = 1, dodge.width = 0.9)) +
theme_classic()
library(tidyverse)
library(Hmisc)
# load in the data
ipip <- read_csv('ipip50_sample.csv')
setwd('C:/Users/laura/OneDrive/Documents/GitHub/ps10-LauraLise')
# load in the data
ipip <- read_csv('ipip50_sample.csv')
# recode data in wide format
ipip <- ipip %>%
mutate(exer=factor(exer,levels=c('veryRarelyNever','less1mo','less1wk',
'1or2wk','3or5wk','more5wk')),  #orders levels of exercise appriately
BMI_cat=case_when(BMI<18.5~'underweight',
BMI>=18.5&BMI<25~'healthy',
BMI>=25&BMI<30~'overweight',
BMI>=30~'obese'), #geneartes a categorical version of BMI
BMI_cat=factor(BMI_cat, levels=c('underweight', 'healthy', 'overweight','obese'))) #orders levels of BMI_cat
levels(ipip$BMI_cat)
# generate long format
ipip.l <- ipip %>%
gather(A_1:O_10,key=item,value=value) %>%
separate(item,into=c('trait','item'),sep='_')  %>%
group_by(RID,trait) %>%
summarise(value=mean(value)) %>%  #calculates average trait values
left_join(select(ipip,RID,age,gender,BMI,BMI_cat,exer,logMedInc),.) #merges summarized traits with health and income information
View(ipip.l)
# create a boxplot that visualizes BMI distributions according to exercise habits, separately for females and males
# include at least two customizations to the look of the boxplot
# check the documentation for options
Q1 <- ggplot(ipip.l, aes(x=gender, y=BMI, color=gender)) +
geom_boxplot(outlier.size = .8, lwd=1)
Q1
# create a boxplot that visualizes BMI distributions according to exercise habits, separately for females and males
# include at least two customizations to the look of the boxplot
# check the documentation for options
Q1 <- ggplot(ipip.l, aes(x=gender, y=BMI, color=exer)) +
geom_boxplot(outlier.size = .8, lwd=1)
Q1
?geom_boxplot
# create a boxplot that visualizes BMI distributions according to exercise habits, separately for females and males
# include at least two customizations to the look of the boxplot
# check the documentation for options
Q1 <- ggplot(ipip.l, aes(x=gender, y=BMI, color=exer)) +
geom_boxplot(outlier.size = .8, lwd=1, outlier.shape = 19)
Q1
# create a boxplot that visualizes BMI distributions according to exercise habits, separately for females and males
# include at least two customizations to the look of the boxplot
# check the documentation for options
Q1 <- ggplot(ipip.l, aes(x=gender, y=BMI, color=exer)) +
geom_boxplot(outlier.size = .8, lwd=1, outlier.shape = 22)
Q1
# create a boxplot that visualizes BMI distributions according to exercise habits, separately for females and males
# include at least two customizations to the look of the boxplot
# check the documentation for options
Q1 <- ggplot(ipip.l, aes(x=gender, y=BMI, color=exer)) +
geom_boxplot(outlier.size = .8, lwd=1, outlier.shape = 25)
Q1
# create a boxplot that visualizes BMI distributions according to exercise habits, separately for females and males
# include at least two customizations to the look of the boxplot
# check the documentation for options
Q1 <- ggplot(ipip.l, aes(x=gender, y=BMI, color=exer)) +
geom_boxplot(outlier.size = .8, lwd=1, outlier.shape = 30)
Q1
# create a boxplot that visualizes BMI distributions according to exercise habits, separately for females and males
# include at least two customizations to the look of the boxplot
# check the documentation for options
Q1 <- ggplot(ipip.l, aes(x=gender, y=BMI, color=exer)) +
geom_boxplot(outlier.size = .8, lwd=1, outlier.shape = 15)
Q1
# create a boxplot that visualizes BMI distributions according to exercise habits, separately for females and males
# include at least two customizations to the look of the boxplot
# check the documentation for options
Q1 <- ggplot(ipip.l, aes(x=gender, y=BMI, color=exer)) +
geom_boxplot(outlier.size = .8, lwd=1, outlier.shape = 20)
Q1
# create a boxplot that visualizes BMI distributions according to exercise habits, separately for females and males
# include at least two customizations to the look of the boxplot
# check the documentation for options
Q1 <- ggplot(ipip.l, aes(x=gender, y=BMI, color=exer)) +
geom_boxplot(outlier.size = .8, lwd=1, outlier.shape = 20)
Q1
# create a boxplot that visualizes BMI distributions according to exercise habits, separately for females and males
# include at least two customizations to the look of the boxplot
# check the documentation for options
Q1 <- ggplot(ipip.l, aes(x=gender, y=BMI, color=exer)) +
geom_boxplot(outlier.size = .8, lwd=5, outlier.shape = 20)
Q1
# create a boxplot that visualizes BMI distributions according to exercise habits, separately for females and males
# include at least two customizations to the look of the boxplot
# check the documentation for options
Q1 <- ggplot(ipip.l, aes(x=gender, y=BMI, color=exer)) +
geom_boxplot(outlier.size = .8, lwd=1, outlier.shape = 20)
Q1
# create a boxplot that visualizes BMI distributions according to exercise habits, separately for females and males
# include at least two customizations to the look of the boxplot
# check the documentation for options
Q1 <- ggplot(ipip.l, aes(x=gender, y=BMI, color=exer)) +
geom_boxplot(outlier.size = 1, lwd=1, outlier.shape = 20)
Q1
# create a boxplot that visualizes BMI distributions according to exercise habits, separately for females and males
# include at least two customizations to the look of the boxplot
# check the documentation for options
Q1 <- ggplot(ipip.l, aes(x=gender, y=BMI, color=exer)) +
geom_boxplot(outlier.size = 7, lwd=1, outlier.shape = 20)
Q1
# create a boxplot that visualizes BMI distributions according to exercise habits, separately for females and males
# include at least two customizations to the look of the boxplot
# check the documentation for options
Q1 <- ggplot(ipip.l, aes(x=gender, y=BMI, color=exer)) +
geom_boxplot(outlier.size = 1, lwd=1, outlier.shape = 20)
Q1
# create a boxplot that visualizes BMI distributions according to exercise habits, separately for females and males
# include at least two customizations to the look of the boxplot
# check the documentation for options
Q1 <- ggplot(ipip.l, aes(x=gender, y=BMI, color=exer)) +
geom_boxplot(outlier.size = 1, lwd=1, outlier.shape = 20, outlier.colour = 'black')
Q1
# create a boxplot that visualizes BMI distributions according to exercise habits, separately for females and males
# include at least two customizations to the look of the boxplot
# check the documentation for options
Q1 <- ggplot(ipip.l, aes(x=gender, y=BMI, color=exer)) +
geom_boxplot(outlier.size = 1, lwd=1, outlier.shape = 20)
Q1
ggsave('figures/Q1.pdf',units='in',width=4,height=5)
# create a boxplot that visualizes BMI distributions according to exercise habits, separately for females and males
# include at least two customizations to the look of the boxplot
# check the documentation for options
Q1 <- ggplot(ipip.l, aes(x=exer, y=BMI, color=gender)) +
geom_boxplot(outlier.size = 1, lwd=1, outlier.shape = 20)
Q1
# create a boxplot that visualizes BMI distributions according to exercise habits, separately for females and males
# include at least two customizations to the look of the boxplot
# check the documentation for options
Q1 <- ggplot(ipip.l, aes(x=exer, y=BMI, color=gender)) +
geom_boxplot(outlier.size = 1, lwd=1, outlier.shape = 20) +
theme(axis.text.x = element_text(angle = 45))                                                                                               size = 12, angle = 45)
# create a boxplot that visualizes BMI distributions according to exercise habits, separately for females and males
# include at least two customizations to the look of the boxplot
# check the documentation for options
Q1 <- ggplot(ipip.l, aes(x=exer, y=BMI, color=gender)) +
geom_boxplot(outlier.size = 1, lwd=1, outlier.shape = 20) +
theme(axis.text.x = element_text(angle = 45))
Q1
?geom_boxplot
# create a boxplot that visualizes BMI distributions according to exercise habits, separately for females and males
# include at least two customizations to the look of the boxplot
# check the documentation for options
Q1 <- ggplot(ipip.l, aes(x=exer, y=BMI, color=gender)) +
geom_boxplot(outlier.size = 1, lwd=1, outlier.shape = 20,notch = T)+ #, notchwidth = 0.5, varwidth = FALSE) +
theme(axis.text.x = element_text(angle = 45))
Q1
# create a boxplot that visualizes BMI distributions according to exercise habits, separately for females and males
# include at least two customizations to the look of the boxplot
# check the documentation for options
Q1 <- ggplot(ipip.l, aes(x=exer, y=BMI, color=gender)) +
geom_boxplot(outlier.size = 1, lwd=1, outlier.shape = 20, notch = T) +
theme(axis.text.x = element_text(angle = 45))
Q1
ggsave('figures/Q1.pdf',units='in',width=4,height=5)
# create a scatter plot to visualize the relationship between income and BMI, coloring points according to gender
# use geom_smooth to add linear model fit lines, separately for males and females
Q2a <- ggplot(ipip,aes(x=logMedInc,y=BMI, color=gender))+
geom_point(size=.5,alpha=.4)+
geom_smooth(method='lm')
Q2a
# create a scatter plot to visualize the relationship between income and BMI, coloring points according to gender
# use geom_smooth to add linear model fit lines, separately for males and females
Q2a <- ggplot(ipip.l,aes(x=logMedInc,y=BMI, color=gender))+
geom_point(size=.5,alpha=.4)+
geom_smooth(method='lm')
Q2a
# create a scatter plot to visualize the relationship between income and BMI, coloring points according to gender
# use geom_smooth to add linear model fit lines, separately for males and females
Q2a <- ggplot(ipip,aes(x=logMedInc,y=BMI, color=gender))+
geom_point(size=.5,alpha=.4)+
geom_smooth(method='lm')
Q2a
ggsave('figures/Q2a.pdf',units='in',width=4,height=5)
?filter
# there are some outlying lower income points, especially for females
# recreate this graph filtering for log median income>10
Q2b <- ggplot(ipip %>% filter(logMedInc>10),aes(x=logMedInc,y=BMI, color=gender))+
geom_point(size=.5,alpha=.4)+
geom_smooth(method='lm')
Q2b
# there are some outlying lower income points, especially for females
# recreate this graph filtering for log median income>10
Q2b <- ggplot(ipip %>% filter(logMedInc>10),aes(x=logMedInc,y=BMI, color=gender))+
geom_point(size=.8,alpha=.4)+
geom_smooth(method='lm')
Q2b
# create a scatter plot to visualize the relationship between income and BMI, coloring points according to gender
# use geom_smooth to add linear model fit lines, separately for males and females
Q2a <- ggplot(ipip,aes(x=logMedInc,y=BMI, color=gender))+
geom_point(size=.8,alpha=.4)+
geom_smooth(method='lm')
Q2a
ggsave('figures/Q2a.pdf',units='in',width=4,height=5)
# there are some outlying lower income points, especially for females
# recreate this graph filtering for log median income>10
Q2b <- ggplot(ipip %>% filter(logMedInc>10),aes(x=logMedInc,y=BMI, color=gender))+
geom_point(size=.8,alpha=.4)+
geom_smooth(method='lm')
Q2b
ggsave('figures/Q2b.pdf',units='in',width=4,height=5)
View(ipip)
# create a bar graph displaying the average income level of men and women who exercise at different rates
# add errorbars reflecting bootstrapped confidence intervals using the Hmisc package
# the default range on the y-axis will be very large given the range of the data
# add a +coord_cartesian(ylim = c(10, 12)) to rescale it.
ggplot(ipip, aes(x=gender, y=logMedInc, color=exer)) +
stat_summary(fun.y=mean,  geom="bar", fill=NA, position=position_dodge(width=.9)) +
stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(width=.9), width=.3) # need to set width=.9, or else will squish all the errorbars together
# create a bar graph displaying the average income level of men and women who exercise at different rates
# add errorbars reflecting bootstrapped confidence intervals using the Hmisc package
# the default range on the y-axis will be very large given the range of the data
# add a +coord_cartesian(ylim = c(10, 12)) to rescale it.
ggplot(ipip, aes(x=gender, y=logMedInc, color=exer)) +
stat_summary(fun.y=mean,  geom="bar", fill=NA, position=position_dodge(width=.9)) +
stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(width=.9), width=.3) +
theme_classic() + coord_cartesian(ylim = c(10, 12))# need to set width=.9, or else will squish all the errorbars together
# create a bar graph displaying the average income level of men and women who exercise at different rates
# add errorbars reflecting bootstrapped confidence intervals using the Hmisc package
# the default range on the y-axis will be very large given the range of the data
# add a +coord_cartesian(ylim = c(10, 12)) to rescale it.
ggplot(ipip, aes(x=gender, y=logMedInc, color=exer)) +
stat_summary(fun.y=mean,  geom="bar", fill=exer, position=position_dodge(width=.9)) +
stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(width=.9), width=.3) +
theme_classic() + coord_cartesian(ylim = c(10, 12))# need to set width=.9, or else will squish all the errorbars together
# create a bar graph displaying the average income level of men and women who exercise at different rates
# add errorbars reflecting bootstrapped confidence intervals using the Hmisc package
# the default range on the y-axis will be very large given the range of the data
# add a +coord_cartesian(ylim = c(10, 12)) to rescale it.
ggplot(ipip, aes(x=gender, y=logMedInc, fill=exer)) +
stat_summary(fun.y=mean,  geom="bar", position=position_dodge(width=.9)) +
stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(width=.9), width=.3) +
theme_classic() + coord_cartesian(ylim = c(10, 12))# need to set width=.9, or else will squish all the errorbars together
# create a bar graph displaying the average income level of men and women who exercise at different rates
# add errorbars reflecting bootstrapped confidence intervals using the Hmisc package
# the default range on the y-axis will be very large given the range of the data
# add a +coord_cartesian(ylim = c(10, 12)) to rescale it.
ggplot(ipip, aes(x=gender, y=logMedInc, fill=exer, alpha=.5)) +
stat_summary(fun.y=mean,  geom="bar", position=position_dodge(width=.9)) +
stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(width=.9), width=.3) +
theme_classic() + coord_cartesian(ylim = c(10, 12))# need to set width=.9, or else will squish all the errorbars together
# create a bar graph displaying the average income level of men and women who exercise at different rates
# add errorbars reflecting bootstrapped confidence intervals using the Hmisc package
# the default range on the y-axis will be very large given the range of the data
# add a +coord_cartesian(ylim = c(10, 12)) to rescale it.
ggplot(ipip, aes(x=gender, y=logMedInc, color=exer)) +
stat_summary(fun.y=mean,  geom="bar", fill=exer, alpha=.5, position=position_dodge(width=.9)) +
stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(width=.9), width=.3) +
theme_classic() + coord_cartesian(ylim = c(10, 12))# need to set width=.9, or else will squish all the errorbars together
# create a bar graph displaying the average income level of men and women who exercise at different rates
# add errorbars reflecting bootstrapped confidence intervals using the Hmisc package
# the default range on the y-axis will be very large given the range of the data
# add a +coord_cartesian(ylim = c(10, 12)) to rescale it.
ggplot(ipip, aes(x=gender, y=logMedInc, color=exer)) +
stat_summary(fun.y=mean,  geom="bar", fill=ipip$exer, alpha=.5, position=position_dodge(width=.9)) +
stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(width=.9), width=.3) +
theme_classic() + coord_cartesian(ylim = c(10, 12))# need to set width=.9, or else will squish all the errorbars together
# create a bar graph displaying the average income level of men and women who exercise at different rates
# add errorbars reflecting bootstrapped confidence intervals using the Hmisc package
# the default range on the y-axis will be very large given the range of the data
# add a +coord_cartesian(ylim = c(10, 12)) to rescale it.
ggplot(ipip, aes(x=gender, y=logMedInc, color=exer, fill=exer, alpha=.5)) +
stat_summary(fun.y=mean,  geom="bar", position=position_dodge(width=.9)) +
stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(width=.9), width=.3) +
theme_classic() + coord_cartesian(ylim = c(10, 12))# need to set width=.9, or else will squish all the errorbars together
# create a bar graph displaying the average income level of men and women who exercise at different rates
# add errorbars reflecting bootstrapped confidence intervals using the Hmisc package
# the default range on the y-axis will be very large given the range of the data
# add a +coord_cartesian(ylim = c(10, 12)) to rescale it.
ggplot(ipip, aes(x=gender, y=logMedInc, color=exer, fill=exer, alpha=.25)) +
stat_summary(fun.y=mean,  geom="bar", position=position_dodge(width=.9)) +
stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(width=.9), width=.3) +
theme_classic() + coord_cartesian(ylim = c(10, 12))# need to set width=.9, or else will squish all the errorbars together
?aes
# create a bar graph displaying the average income level of men and women who exercise at different rates
# add errorbars reflecting bootstrapped confidence intervals using the Hmisc package
# the default range on the y-axis will be very large given the range of the data
# add a +coord_cartesian(ylim = c(10, 12)) to rescale it.
ggplot(ipip, aes(x=gender, y=logMedInc, color=exer, fill=exer)) +
stat_summary(fun.y=mean,  geom="bar", alpha=.25, position=position_dodge(width=.9)) +
stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(width=.9), width=.3) +
theme_classic() + coord_cartesian(ylim = c(10, 12))# need to set width=.9, or else will squish all the errorbars together
# create a bar graph displaying the average income level of men and women who exercise at different rates
# add errorbars reflecting bootstrapped confidence intervals using the Hmisc package
# the default range on the y-axis will be very large given the range of the data
# add a +coord_cartesian(ylim = c(10, 12)) to rescale it.
ggplot(ipip, aes(x=gender, y=logMedInc, color=exer, fill=exer)) +
stat_summary(fun.y=mean,  geom="bar", alpha=.5, position=position_dodge(width=.9)) +
stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(width=.9), width=.3) +
theme_classic() + coord_cartesian(ylim = c(10, 12))# need to set width=.9, or else will squish all the errorbars together
# create a bar graph displaying the average income level of men and women who exercise at different rates
# add errorbars reflecting bootstrapped confidence intervals using the Hmisc package
# the default range on the y-axis will be very large given the range of the data
# add a +coord_cartesian(ylim = c(10, 12)) to rescale it.
ggplot(ipip, aes(x=gender, y=logMedInc, color=exer, fill=exer)) +
stat_summary(fun.y=mean,  geom="bar", alpha=.5, position=position_dodge(width=.9)) +
stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(width=.9), width=.3) +
theme_minimal() + coord_cartesian(ylim = c(10, 12))# need to set width=.9, or else will squish all the errorbars together
# create a bar graph displaying the average income level of men and women who exercise at different rates
# add errorbars reflecting bootstrapped confidence intervals using the Hmisc package
# the default range on the y-axis will be very large given the range of the data
# add a +coord_cartesian(ylim = c(10, 12)) to rescale it.
ggplot(ipip.l, aes(x=gender, y=logMedInc, color=exer, fill=exer)) +
stat_summary(fun.y=mean,  geom="bar", alpha=.5, position=position_dodge(width=.9)) +
stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(width=.9), width=.3) +
theme_minimal() + coord_cartesian(ylim = c(10, 12))# need to set width=.9, or else will squish all the errorbars together
# create a bar graph displaying the average income level of men and women who exercise at different rates
# add errorbars reflecting bootstrapped confidence intervals using the Hmisc package
# the default range on the y-axis will be very large given the range of the data
# add a +coord_cartesian(ylim = c(10, 12)) to rescale it.
ggplot(ipip, aes(x=gender, y=logMedInc, color=exer, fill=exer)) +
stat_summary(fun.y=mean,  geom="bar", alpha=.5, position=position_dodge(width=.9)) +
stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(width=.9), width=.3) +
theme_minimal() + coord_cartesian(ylim = c(10, 12))# need to set width=.9, or else will squish all the errorbars together
# create a bar graph displaying the average income level of men and women who exercise at different rates
# add errorbars reflecting bootstrapped confidence intervals using the Hmisc package
# the default range on the y-axis will be very large given the range of the data
# add a +coord_cartesian(ylim = c(10, 12)) to rescale it.
ggplot(ipip, aes(x=gender, y=logMedInc, color=exer, fill=exer)) +
stat_summary(fun.y=mean,  geom="bar", alpha=.25, position=position_dodge(width=.9)) +
stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(width=.9), width=.3) +
theme_minimal() + coord_cartesian(ylim = c(10, 12))# need to set width=.9, or else will squish all the errorbars together
# create a bar graph displaying the average income level of men and women who exercise at different rates
# add errorbars reflecting bootstrapped confidence intervals using the Hmisc package
# the default range on the y-axis will be very large given the range of the data
# add a +coord_cartesian(ylim = c(10, 12)) to rescale it.
ggplot(ipip, aes(x=gender, y=logMedInc, color=exer, fill=exer)) +
stat_summary(fun.y=mean,  geom="bar", alpha=.45, position=position_dodge(width=.9)) +
stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(width=.9), width=.3) +
theme_minimal() + coord_cartesian(ylim = c(10, 12))# need to set width=.9, or else will squish all the errorbars together
# create a bar graph displaying the average income level of men and women who exercise at different rates
# add errorbars reflecting bootstrapped confidence intervals using the Hmisc package
# the default range on the y-axis will be very large given the range of the data
# add a +coord_cartesian(ylim = c(10, 12)) to rescale it.
ggplot(ipip.l, aes(x=gender, y=logMedInc, color=exer, fill=exer)) +
stat_summary(fun.y=mean,  geom="bar", alpha=.45, position=position_dodge(width=.9)) +
stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(width=.9), width=.3) +
theme_minimal() + coord_cartesian(ylim = c(10, 12))# need to set width=.9, or else will squish all the errorbars together
# create a bar graph displaying the average income level of men and women who exercise at different rates
# add errorbars reflecting bootstrapped confidence intervals using the Hmisc package
# the default range on the y-axis will be very large given the range of the data
# add a +coord_cartesian(ylim = c(10, 12)) to rescale it.
Q3 <-ggplot(ipip, aes(x=gender, y=logMedInc, color=exer, fill=exer)) +
stat_summary(fun.y=mean,  geom="bar", alpha=.45, position=position_dodge(width=.9)) +
stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(width=.9), width=.3) +
theme_minimal() + coord_cartesian(ylim = c(10, 12))# need to set width=.9, or else will squish all the errorbars together
Q3
ggsave('figures/Q3.pdf',units='in',width=4,height=5)
# create a bar graph displaying the average income level of men and women who exercise at different rates
# add errorbars reflecting bootstrapped confidence intervals using the Hmisc package
# the default range on the y-axis will be very large given the range of the data
# add a +coord_cartesian(ylim = c(10, 12)) to rescale it.
Q3 <-ggplot(ipip, aes(x=gender, y=logMedInc, color=exer, fill=exer)) +
stat_summary(fun.y=mean_cl_boot,  geom="bar", alpha=.45, position=position_dodge(width=.9), width=.3) +
#stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(width=.9), width=.3) +
theme_minimal() + coord_cartesian(ylim = c(10, 12))# need to set width=.9, or else will squish all the errorbars together
Q3
# create a bar graph displaying the average income level of men and women who exercise at different rates
# add errorbars reflecting bootstrapped confidence intervals using the Hmisc package
# the default range on the y-axis will be very large given the range of the data
# add a +coord_cartesian(ylim = c(10, 12)) to rescale it.
Q3 <-ggplot(ipip, aes(x=gender, y=logMedInc, color=exer, fill=exer)) +
stat_summary(fun.y=mean_cl_boot,  geom="bar", alpha=.45, position=position_dodge(width=.9)) +
#stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(width=.9), width=.3) +
theme_minimal() + coord_cartesian(ylim = c(10, 12))# need to set width=.9, or else will squish all the errorbars together
Q3
